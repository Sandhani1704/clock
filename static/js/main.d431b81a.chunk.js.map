{"version":3,"sources":["components/app/app.js","reportWebVitals.js","index.js"],"names":["App","useState","Date","clockTime","setClockTime","timerBack","setTimerBack","currentTime","setCurrentTime","formatDigits","num","useEffect","interval","setInterval","getTime","clearInterval","hours","getHours","minutes","getMinutes","seconds","getSeconds","className","map","item","key","Button","variant","onClick","toLocaleTimeString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAqEeA,MAjEf,WAEE,MAAkCC,mBAAS,IAAIC,MAA/C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAsCL,mBAAS,IAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEMC,EAAe,SAACC,GAAD,OAAUA,EAAM,GAAN,WAAeA,GAAf,UAA0BA,IAEzDC,qBAAU,WACR,IAAKN,EAAW,CAEd,IAAMO,EAAWC,aAAY,WAC3BT,GAAa,SAACD,GAAD,OAAe,IAAID,KAAKC,EAAUW,UAAY,UAC1D,KACH,OAAO,kBAAMC,cAAcH,IAE7B,GAAIP,EAAW,CAEb,IAAMO,EAAWC,aAAY,WAC3BT,GAAa,SAACD,GAAD,OAAe,IAAID,KAAKC,EAAUW,UAAY,UAC1D,KACH,OAAO,kBAAMC,cAAcH,OAE5B,CAACP,IAEJ,IAIMW,EAAQP,EAAaN,EAAUc,YAC/BC,EAAUT,EAAaN,EAAUgB,cACjCC,EAAUX,EAAaN,EAAUkB,cAEvC,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,+BAAON,IADT,IACuB,+BAAOE,IAD9B,IAC8C,+BAAOE,OAEpDb,EAAYgB,KAAI,SAACC,EAAMC,GAAP,OACf,uCAAoBD,IAAZC,MAEV,sBAAKH,UAAU,iBAAf,UACE,cAACI,EAAA,EAAD,CACEC,QAAQ,UACRL,UAAU,2BACVM,QAAS,kBAAMtB,GAAa,SAACD,GAAD,OAAgBA,MAH9C,SAIGA,EAAY,mBAAqB,kBAEpC,cAACqB,EAAA,EAAD,CACEC,QAAQ,UACRL,UAAU,2BACVM,QA1Be,WACrBpB,EAAe,GAAD,mBAAKD,GAAL,EAAkB,IAAIL,MAAO2B,yBAsBvC,8BAMA,cAACH,EAAA,EAAD,CACEC,QAAQ,UACRL,UAAU,2BACVM,QAAS,kBAAMxB,EAAa,IAAIF,OAHlC,0BC9CO4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d431b81a.chunk.js","sourcesContent":["import './app.css';\nimport Button from 'react-bootstrap/Button';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const [clockTime, setClockTime] = useState(new Date());\n  const [timerBack, setTimerBack] = useState(false);\n  const [currentTime, setCurrentTime] = useState([]);\n  \n  const formatDigits = (num) => (num < 10 ? `0${num}` : `${num}`);\n\n  useEffect(() => {\n    if (!timerBack) {\n\n      const interval = setInterval(() => {\n        setClockTime((clockTime) => new Date(clockTime.getTime() + 1000));\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n    if (timerBack) {\n\n      const interval = setInterval(() => {\n        setClockTime((clockTime) => new Date(clockTime.getTime() - 1000));\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [timerBack]);\n\n  const getCurrentTime = () => {\n    setCurrentTime([...currentTime, new Date().toLocaleTimeString()]);\n  }\n\n  const hours = formatDigits(clockTime.getHours());\n  const minutes = formatDigits(clockTime.getMinutes());\n  const seconds = formatDigits(clockTime.getSeconds());\n\n  return (\n    <div className=\"app\">\n      <div className=\"clock__digits\">\n        <span>{hours}</span>:<span>{minutes}</span>:<span>{seconds}</span>\n      </div>\n      {currentTime.map((item, key) => (\n        <p key={key}>time: {item}</p>\n      ))}\n      <div className=\"clock__buttons\">\n        <Button\n          variant=\"primary\"\n          className=\"m-2 mr-3 btn btn-primary\"\n          onClick={() => setTimerBack((timerBack) => !timerBack)}>\n          {timerBack ? 'Go Clock Forward' : 'Go Clock Back'}\n        </Button>\n        <Button\n          variant=\"primary\"\n          className=\"m-2 mr-3 btn btn-primary\"\n          onClick={getCurrentTime} >\n          Get Current Time\n        </Button>\n        <Button\n          variant=\"primary\"\n          className=\"m-2 mr-3 btn btn-primary\"\n          onClick={() => setClockTime(new Date())} >\n          Reset\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}